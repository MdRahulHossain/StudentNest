## Database Setup (MySQL Commands)

```sql
-- Create database
CREATE DATABASE studentnest_db;
USE studentnest_db;

-- Create users table
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL,
    user_type ENUM('Student', 'House Owner', 'Admin') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create rooms table
CREATE TABLE rooms (
    id INT AUTO_INCREMENT PRIMARY KEY,
    owner_id INT NOT NULL,
    location VARCHAR(100) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    description TEXT,
    contact_number VARCHAR(20) NOT NULL,
    map_link VARCHAR(500),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Insert default admin user
INSERT INTO users (name, phone, username, password, user_type) 
VALUES ('Admin', '01700000000', 'admin', 'admin123', 'Admin');

-- Insert sample data

INSERT INTO users (name, phone, username, password, user_type) VALUES
('Hasib Vau', '01234567891', 'hasib_student', 'password123', 'Student'),
('Rahul Hossain', '01234567892', 'rahul_student', 'password123', 'Student'),
('Arman Hossen', '01234567893', 'arman_owner', 'password123', 'House Owner'),
('Saief Ali Khan', '01234567894', 'saief_owner', 'password123', 'House Owner'),
('Sabbir Hossaine', '01234567895', 'sabbir_owner', 'password123', 'House Owner');




-- Insert sample rooms
INSERT INTO rooms (owner_id, location, price, description, contact_number, map_link) VALUES
(3, 'Khagan', 8000.00, 'Single room with attached bathroom, furnished, near DIU campus', '01711111111', 'https://maps.google.com/khagan'),
(3, 'Candgaon', 6500.00, 'Shared room, 2 beds, common kitchen, 5 min walk to DIU', '01711111111', 'https://maps.google.com/candgaon'),
(4, 'Charabag', 12000.00, 'Private room with balcony, AC, WiFi included', '01722222222', 'https://maps.google.com/charabag'),
(4, 'Kumkumari', 7500.00, 'Double sharing, fully furnished, meals available', '01722222222', 'https://maps.google.com/kumkumari');
```


CREATE TABLE `feedback_and_issues` (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
    `user_id` INT(11) NOT NULL,
    `feedback_text` TEXT NOT NULL,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE ON UPDATE CASCADE
);

## 8. Setup Instructions

### Prerequisites:
1. **Java Development Kit (JDK)** - Version 8 or higher
2. **IntelliJ IDEA** - Community or Ultimate Edition
3. **JavaFX SDK** - Version 11 or higher
4. **XAMPP** - For MySQL database
5. **MySQL Connector/J** - JDBC driver

### Step-by-Step Setup:

#### Step 1: Download and Install Required Software
1. Install JDK from Oracle or OpenJDK
2. Install IntelliJ IDEA
3. Download JavaFX SDK from OpenJFX website
4. Install XAMPP
5. Download MySQL Connector/J (mysql-connector-j-9.4.0.jar)

#### Step 2: Database Setup
1. Start XAMPP Control Panel
2. Start Apache and MySQL services
3. Open phpMyAdmin (http://localhost/phpmyadmin)
4. Create new database named `studentnest_db`
5. Execute the SQL commands provided above to create tables and insert sample data

#### Step 3: Project Setup in IntelliJ IDEA

1. **Create New Project:**
   - File → New → Project
   - Select Java
   - Choose Project SDK (your JDK)
   - Don't use template, click Next
   - Project name: StudentNest
   - Choose project location
   - Click Finish

2. **Setup Project Structure:**
   ```
   StudentNest/
   ├── src/
   │   └── main/
   │       └── java/
   │           └── com/
   │               └── studentnest/
   └── resources/
       └── fxml/
   ```

3. **Add JavaFX to Project:**
   - File → Project Structure → Libraries
   - Click + → Java
   - Navigate to JavaFX SDK lib folder
   - Select all JAR files
   - Apply changes

4. **Add MySQL Connector:**
   - Copy mysql-connector-j-9.4.0.jar to lib folder
   - File → Project Structure → Libraries
   - Click + → Java
   - Select the MySQL connector JAR file
   - Apply changes

5. **Configure VM Options:**
   - Run → Edit Configurations
   - Click + → Application
   - Name: StudentNest
   - Main class: com.studentnest.Main
   - VM options: `--module-path "path/to/javafx/lib" --add-modules javafx.controls,javafx.fxml`
   - Replace "path/to/javafx/lib" with actual path to JavaFX lib folder

#### Step 4: Create Files
1. Create all the Java files in their respective packages as shown in the project structure
2. Create the FXML files in the resources/fxml folder
3. Copy and paste the code provided for each file

#### Step 5: Database Configuration
1. Make sure XAMPP MySQL is running
2. Verify database connection in DatabaseConnection.java
3. Update URL, username, password if needed:
   ```java
   private static final String URL = "jdbc:mysql://localhost:3306/studentnest_db";
   private static final String USERNAME = "root";
   private static final String PASSWORD = "";
   ```

#### Step 6: Run the Application
1. Build the project (Build → Build Project)
2. Run the Main class
3. The login window should appear

### Default Login Credentials:
- **Admin:** username: `admin`, password: `admin123`
- **Student:** username: `john_student`, password: `password123`
- **House Owner:** username: `ahmed_owner`, password: `password123`

## 9. Key Features Implemented

### Login System:
- Multi-user authentication (Student, House Owner, Admin)
- Session management with current user tracking
- Secure login validation

### Student Dashboard:
- Browse available rooms with detailed information
- Filter rooms by location and price range
- Contact house owners directly
- Clean, user-friendly interface

### House Owner Dashboard:
- Add new rooms with complete details
- Update existing room information
- Delete rooms from listings
- Manage all posted rooms in one place

### Admin Dashboard:
- View all registered users (Students and House Owners)
- Delete user accounts and associated data
- Manage room postings
- Visual statistics with pie chart showing user distribution
- Complete system oversight

### Database Integration:
- MySQL database with proper relationships
- CRUD operations for users and rooms
- Data integrity with foreign keys
- Sample data included for testing

## 10. File Structure Summary

```
StudentNest/
├── src/main/java/com/studentnest/
│   ├── Main.java                           # Application entry point
│   ├── controllers/                        # UI Controllers
│   │   ├── LoginController.java
│   │   ├── RegistrationController.java
│   │   ├── StudentDashboardController.java
│   │   ├── HouseOwnerDashboardController.java
│   │   └── AdminDashboardController.java
│   ├── models/                             # Data Models
│   │   ├── User.java
│   │   ├── Student.java
│   │   ├── HouseOwner.java
│   │   └── Room.java
│   ├── database/                           # Database Connection
│   │   └── DatabaseConnection.java
│   └── utils/                              # Utilities
│       └── SceneManager.java
├── resources/fxml/                         # UI Layout Files
│   ├── login.fxml
│   ├── registration.fxml
│   ├── student-dashboard.fxml
│   ├── houseowner-dashboard.fxml
│   └── admin-dashboard.fxml
└── lib/                                   # External Libraries
    └── mysql-connector-j-9.4.0.jar
```

## 11. Troubleshooting

### Common Issues:
1. **JavaFX Runtime Error:** Make sure VM options are set correctly
2. **Database Connection Failed:** Check if MySQL is running in XAMPP
3. **FXML Loading Error:** Verify FXML files are in resources/fxml folder
4. **ClassNotFoundException:** Ensure MySQL connector is added to project libraries

### Testing the Application:
1. Start with admin login to verify system works
2. Create new user accounts through registration
3. Test each user type's functionality
4. Verify database updates in phpMyAdmin

This complete StudentNest application provides all the requested features with a professional, scalable architecture suitable for a university OOP project.